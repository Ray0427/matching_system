// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/add-single-person-and-match": {
            "post": {
                "description": "Add a single person and match",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Add a single person and match",
                "parameters": [
                    {
                        "description": "Person",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddPersonRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.AddPersonResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Get API health status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/query-single-people": {
            "get": {
                "description": "Query single people",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Query single people",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.QueryPeopleResponse"
                        }
                    }
                }
            }
        },
        "/remove-single-person/{id}": {
            "delete": {
                "description": "Remove a single person",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Remove a single person",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.RemovePersonResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AddPersonRequest": {
            "type": "object",
            "required": [
                "gender",
                "height",
                "name",
                "wanted_dates"
            ],
            "properties": {
                "gender": {
                    "type": "string",
                    "enum": [
                        "male",
                        "female"
                    ]
                },
                "height": {
                    "type": "integer",
                    "maximum": 250,
                    "minimum": 100
                },
                "name": {
                    "type": "string"
                },
                "wanted_dates": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "dto.AddPersonResponse": {
            "type": "object",
            "properties": {
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Match"
                    }
                },
                "message": {
                    "type": "string"
                },
                "person": {
                    "$ref": "#/definitions/models.Person"
                }
            }
        },
        "dto.QueryPeopleResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "people": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Person"
                    }
                }
            }
        },
        "dto.RemovePersonResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.Match": {
            "type": "object",
            "properties": {
                "person1": {
                    "$ref": "#/definitions/models.Person"
                },
                "person2": {
                    "$ref": "#/definitions/models.Person"
                }
            }
        },
        "models.Person": {
            "type": "object",
            "properties": {
                "gender": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "wanted_dates": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Matching System API",
	Description:      "This is a matching system API server with in-memory storage",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
